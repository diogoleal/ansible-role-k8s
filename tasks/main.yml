---
# tasks file for k8s

- name: Disabled swap
  ansible.builtin.shell:
    cmd: swapoff -a

- name: Add kubernetes repository
  ansible.builtin.yum_repository:
    name: kubernetes
    description: K8S repo
    gpgcheck: true
    gpgkey: https://pkgs.k8s.io/csore:/stable:/v{{ kubernetes_version }}/rpm/repodata/repomd.xml.key
    baseurl: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/
    enabled: no

- name: install packages
  ansible.builtin.yum:
    name:
    - wget
    - netcat
    - curl
    - kubelet
    - kubeadm
    - kubectl
    state: present

- name: sudo systemctl enable --now kubelet
  ansible.builtin.systemd_service:
    state: started
    name: kubelet
    # enabled: true

- name: cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
  template:
    src: k8s_modules_conf.j2
    dest: /etc/modules-load.d/k8s.conf
    owner: root
    group: root


# cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
# overlay
# br_netfilter
# EOF

- name: modprobe overlay
  community.general.modprobe:
    name: overlay
    state: present

- name: modprobe br_netfilter
  community.general.modprobe:
    name: br_netfilter
    state: present

# modprobe overlay
# modprobe br_netfilter

# sysctl params required by setup, params persist across reboots

# - name: cat <<EOF | tee /etc/sysctl.d/k8s.conf
#   template:
#     src: k8s_modules_conf.j2
#     dest: /etc/sysctl.d/k8s.conf
#     owner: root
#     group: root
#     # mode: 0755

- ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: '1'
    sysctl_set: true
    state: present
    reload: true

- ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: '1'
    sysctl_set: true
    state: present
    reload: true

- ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true
    state: present
    reload: true

#
# net.bridge.bridge-nf-call-iptables  = 1
# net.bridge.bridge-nf-call-ip6tables = 1
# net.ipv4.ip_forward                 = 1



# Apply sysctl params without reboot
# sysctl --system
# lsmod | grep br_netfilter
# lsmod | grep overlay

# systemctl enable firewalld.service
# systemctl start firewalld.service
#
# firewall-cmd --permanent --add-port=6443/tcp --add-port=2379-2380/tcp --add-port=10250/tcp \
# --add-port=30000-32767/tcp --add-port=10251-10255/tcp --add-port=8472/udp --permanent
# firewall-cmd --permanent --add-masquerade
# firewall-cmd --reload
#
#
# cat <<EOF | tee /etc/containerd/config.toml
# [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
#    SystemdCgroup = true
# EOF
#
# systemctl enable containerd.service
# systemctl start containerd.service
#
# kubeadm init --kubernetes-version=1.26.11
#
# mkdir -p $HOME/.kube
# cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
# chown $(id -u):$(id -g) $HOME/.kube/config

# Alternatively, if you are the root user, you can run:
# export KUBECONFIG=/etc/kubernetes/admin.conf

# kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
